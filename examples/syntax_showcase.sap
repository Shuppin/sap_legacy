/*
    Multi-line
    comments!
*/
/* Current datatypes are:
    float
    int
*/

// Declarations
float b, x, y;
int z;

// Assigment declarations
float pi := 3.14;
float e := pi*pi;

// Assigments
z := 6;
x := 5;
b := z;

// Note, variables must contain a number value to perfom operations
// Operators
x := x + z;
x := x - z;
x := x * z;
x := x / /*wow*/ z;

// Brackets
x := /* wow */ ((x+3) / (z-1))*4;

// Unary operations
x := -x;
x := x;
x := --x;
x := ----x; // Unary operations are stackable

// Compound statements
// Currently only acts as grouped code, remains in current scope
{
    y := z + x / b * pi;
};

// Functions
def AlphaA(int a) {
    int b;

    // Nested functions
    def Beta(int c) {
        int y;

        def Gamma(int c) {
            int x;
            x := a + b + c + x + y + z;
        };
    };
    {};
};

// Function with return type
def AlphaB(int a) -> int {
    float c;
    c := a + b;
};

// Function without arguments
def empty_func(int f) {
    int y := 5;
};

empty_func();
AlphaB(AlphaA);

/* Scope diagram:
    <global> -------
     /     \        \
    /       \        \
 AlphaA   AlphaB   empty_func
   |
 Beta
   |
 Gamma  
*/

// Potential future syntax

/* op functions
    def op my_operator(int left, int right) -> int {
        int result := (left*right) + (left/right);
        return result;
    };

    def op convolve(int[] left, int[] right) {
        ...
    };

    int new := a1 my_operator 4;

    int[] x := {1, 2, 3} convolve {2, 3, 4};
*/